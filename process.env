REACT_APP_API_URL=http://localhost:4000/api
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "../../css/Register.css"; // Custom CSS for styling

const Register = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    username: "",
    password: "",
    otp: "",
  });
  const [otpSent, setOtpSent] = useState(false);

  const [errors, setErrors] = useState({});
  const [successMessage, setSuccessMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const apiUrl = process.env.REACT_APP_API_URL;

  const validatePassword = (password) => {
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@])[A-Za-z\d@]{6,}$/;
    return passwordRegex.test(password);
  };

  // Form validation function
  const validateForm = () => {
    const { name, email, username, password } = formData;
    const newErrors = {};

    if (!name.trim()) newErrors.name = "Name is required.";
    if (!email.trim()) {
      newErrors.email = "Email is required.";
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = "Invalid email format.";
    }
    if (!username.trim()) newErrors.username = "Username is required.";
    if (!password.trim()) {
      newErrors.password = "Password is required.";
    } else if (password.length < 6) {
      newErrors.password = "Password must be at least 6 characters.";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: "" }); // Clear individual field error on change
  };

  // Handle form submission
  const handleRegister = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;
    if (!validatePassword(formData.password)) {
      setErrors({
        ...errors,
        password:
          "Password must be at least 6 characters long, include one uppercase letter, one lowercase letter, one digit, and the '@' symbol.",
      });
      return;
    }

    if (!formData.otp) {
      setErrors("Please enter the OTP.");
      return;
    }

    try {
      setLoading(true);
      setErrors({});
      const response = await axios.post(`${apiUrl}/users/register`, formData);
      console.log(response);
      if (response.status === 201) {
        setSuccessMessage("Registration successful! Redirecting to login...");
        setFormData({ name: "", email: "", password: "", otp: "" });
        setOtpSent(false);

        setTimeout(() => {
          navigate("/login");
        }, 20000);
      }
    } catch (error) {
      setLoading(false);
      if (error.response && error.response.data) {
        setErrors({
          form: error.response.data.error || "Registration failed.",
        });
      } else {
        setErrors({ form: "Something went wrong. Please try again later." });
      }
    } finally {
      setLoading(false);
    }
  };

  const handleSendOtp = async () => {
    const validationError = validateForm();
    if (validationError) {
      setErrors(validationError);
      return;
    }
    setLoading(true);
    try {
      const response = await fetch(`${apiUrl}/users/send-otp`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: formData.email }),
      });
      const data = await response.json();
      if (data.success) {
        setOtpSent(true);
        setLoading(false);
        setSuccessMessage("OTP sent to your email.");
      } else {
        setErrors(data.message);
      }
    } catch (error) {
      setErrors("Failed to send OTP. Try again.");
    } finally {
      setLoading(false);
    }
  };
  return (
    <div className="register-container">
      <h2>Register</h2>
      <form onSubmit={handleRegister}>
        <div className="form-group">
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            name="name"
            placeholder="Enter your full name"
            value={formData.name}
            onChange={handleInputChange}
          />
          {errors.name && <p className="login-error-message">{errors.name}</p>}
        </div>

        <div className="form-group">
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Enter your email"
            value={formData.email}
            onChange={handleInputChange}
          />
          {errors.email && (
            <p className="login-error-message">{errors.email}</p>
          )}
        </div>

        <div className="form-group">
          <label htmlFor="username">Username:</label>
          <input
            type="text"
            id="username"
            name="username"
            placeholder="Choose a username"
            value={formData.username}
            onChange={handleInputChange}
          />
          {errors.username && (
            <p className="login-error-message">{errors.username}</p>
          )}
        </div>

        <div className="form-group">
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Create a password"
            value={formData.password}
            onChange={handleInputChange}
          />
          {errors.password && (
            <p className="login-error-message">{errors.password}</p>
          )}
        </div>

        {errors.form && <p className="form-error">{errors.form}</p>}
        {successMessage && <p className="success-message">{successMessage}</p>}

        {otpSent && (
          <div>
            <input
              type="text"
              name="otp"
              placeholder="Enter OTP"
              value={formData.otp}
              onChange={handleInputChange}
            />
          </div>
        )}
        {!otpSent ? (
          <button
            className="register-button"
            disabled={loading}
            onClick={handleSendOtp}
          >
            {loading ? "OTP..." : "Send OTP"}
          </button>
        ) : (
          <button type="submit" className="register-button" disabled={loading}>
            {loading ? "Registering..." : "Register"}
          </button>
        )}
        {/* <button type="submit" className="register-button" disabled={loading}>
          {loading ? "Registering..." : "Register"}
        </button> */}
      </form>
    </div>
  );
};

export default Register;
